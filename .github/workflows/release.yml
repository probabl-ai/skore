# Release a package.
#
# Package versions are of the form `<package-name>/X.Y.Z` or `<package-name>/X.Y.Z-rc.1`

name: release

on:
  release:
    types: [released, prereleased]

env:
  UUID: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

permissions: {}

jobs:
  tag-decomposition:
    name: Decompose tag to retrieve package and version
    runs-on: ubuntu-latest
    outputs:
      package: ${{ steps.tag-decomposition.outputs.package }}
      version: ${{ steps.tag-decomposition.outputs.version }}
    steps:
      - shell: bash
        id: tag-decomposition
        run: |
          package="${GITHUB_REF_NAME%/*}"
          version="${GITHUB_REF_NAME#*/}"

          [[ "${package}" == "${version}" ]] && { >&2 echo "Invalid tag: no package"; exit 1; }
          [[ "${package}" =~ ^(skore|skore-(local|remote)-project)$ ]] || { >&2 echo "Invalid tag: invalid package"; exit 1; }
          [[ "${version}" =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-rc\.(1|[1-9][0-9]*))?$ ]] || { >&2 echo "Invalid tag: invalid version"; exit 1; }

          echo "::group::Details"
          echo "package=${package}" | tee --append "${GITHUB_OUTPUT}"
          echo "version=${version}" | tee --append "${GITHUB_OUTPUT}"
          echo "::endgroup::"

  build:
    name: Build package distributions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [tag-decomposition]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Override VERSION.txt with tag
        working-directory: ${{ needs.tag-decomposition.outputs.package }}
        run: echo "${VERSION}" > VERSION.txt
        env:
          VERSION: ${{ needs.tag-decomposition.outputs.version }}

      - name: Set up Python 3.12
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: "3.12"

      - name: Build package distributions
        working-directory: ${{ needs.tag-decomposition.outputs.package }}
        run: python -m pip install build && python -m build

      - name: Checks whether distributionâ€™s long description will render correctly on PyPI
        working-directory: ${{ needs.tag-decomposition.outputs.package }}
        continue-on-error: true
        run: |
          python -m pip install twine
          python -m twine check dist/*

      - name: Upload package distributions
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ env.UUID }}
          path: ${{ needs.tag-decomposition.outputs.package }}/dist/

  publish:
    name: Publish package distributions to PyPI using trusted publisher
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    needs: [tag-decomposition, build]
    steps:
      - name: Download package distributions
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: ${{ env.UUID }}
          path: dist/

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          verify-metadata: false

  communicate:
    name: Communicate on slack about the new release
    runs-on: ubuntu-latest
    needs: [tag-decomposition, publish]
    continue-on-error: true
    steps:
      - name: Post to slack
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: "product-releases"
            text: ${{ github.event.release.html_url }}
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ${{ toJSON(github.event.release.html_url) }}
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ${{ toJSON(format('>>> {0}', github.event.release.body)) }}

  clean:
    name: Delete package distributions artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [tag-decomposition, publish]
    steps:
      - uses: geekyeggo/delete-artifact@f275313e70c08f6120db482d7a6b98377786765b # v5.1.0
        with:
          name: ${{ env.UUID }}
