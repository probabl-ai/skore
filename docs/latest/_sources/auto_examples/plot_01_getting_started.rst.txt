
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_01_getting_started.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_01_getting_started.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_01_getting_started.py:


.. _example_getting_started:

==========================
Getting started with skore
==========================

.. GENERATED FROM PYTHON SOURCE LINES 10-19

This getting started guide illustrates how to use skore and why:

#. Track and visualize your ML/DS results using skore's :class:`~skore.Project` and UI.

#. Machine learning diagnostics: get assistance when developing your ML/DS projects.

   * Scikit-learn compatible :func:`skore.cross_validate` and
     :func:`skore.train_test_split` provide insights and checks on cross-validation
     and train-test-split.

.. GENERATED FROM PYTHON SOURCE LINES 21-26

Track and visualize: skore project and UI
=========================================

A key feature of skore is its :class:`~skore.Project` that allows to store
items of many types then visualize them in a dashboard called the skore UI.

.. GENERATED FROM PYTHON SOURCE LINES 28-30

Creating and loading a skore project, and launching the skore UI
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 32-34

We start by creating a temporary directory to store our project so that we can
easily clean it after executing this example:

.. GENERATED FROM PYTHON SOURCE LINES 36-42

.. code-block:: Python

    import tempfile
    from pathlib import Path

    temp_dir = tempfile.TemporaryDirectory(prefix="skore_example_")
    temp_dir_path = Path(temp_dir.name)








.. GENERATED FROM PYTHON SOURCE LINES 43-44

We create and load the skore project from this temporary directory:

.. GENERATED FROM PYTHON SOURCE LINES 46-50

.. code-block:: Python

    import skore

    my_project = skore.create("my_project", working_dir=temp_dir_path)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [11/28/24 13:32:13] <Logger skore.project.project (INFO)> Project  create.py:148
                                                              file                  
                                                              '/tmp/sk              
                                                              ore_exam              
                                                              ple_i8ut              
                                                              eeyc/my_              
                                                              project.              
                                                              skore'                
                                                              was                   
                                                              successf              
                                                              ully                  
                                                              created.              




.. GENERATED FROM PYTHON SOURCE LINES 51-75

This will create a skore project directory named ``my_project.skore`` in our
current directory.

.. note::

  If we did not wish for our skore project to be stored in a *temporary* folder, we
  could simply create the project in the current directory with:

  .. code-block:: python

    import skore

    my_project = skore.create("my_project")

Then, from our shell (in the same directory), we can start the UI locally:

.. code-block:: bash

    skore launch "my_project"

This will automatically open a browser at the UI's location.

Now that the project exists, we can write some Python code (in the same
directory) to add (:func:`~skore.Project.put`) some useful items in it.

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python

    my_project.put("my_int", 3)








.. GENERATED FROM PYTHON SOURCE LINES 80-86

Skore project and storage: example of hyperparameter sweep
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As an illustration of the usage of the skore project and storage with a machine
learning motivation, let us perform a hyperparameter sweep and store relevant
information in the skore project.

.. GENERATED FROM PYTHON SOURCE LINES 88-90

We search for the ``alpha`` hyperparameter of a Ridge regression on the
Diabetes dataset:

.. GENERATED FROM PYTHON SOURCE LINES 92-108

.. code-block:: Python

    import numpy as np
    from sklearn.datasets import load_diabetes
    from sklearn.linear_model import Ridge
    from sklearn.model_selection import GridSearchCV

    diabetes = load_diabetes()
    X = diabetes.data[:150]
    y = diabetes.target[:150]

    gs_cv = GridSearchCV(
        Ridge(),
        param_grid={"alpha": np.logspace(-3, 5, 50)},
        scoring="neg_root_mean_squared_error",
    )
    gs_cv.fit(X, y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-1 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-1 pre {
      padding: 0;
    }

    #sk-container-id-1 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-1 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-1 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-1 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-1 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-1 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-1 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-1 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-1 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-1 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-1 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-1 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-1 div.sk-label label.sk-toggleable__label,
    #sk-container-id-1 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-1 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-1 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-1 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-1 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-1 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-1 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(estimator=Ridge(),
                 param_grid={&#x27;alpha&#x27;: array([1.00000000e-03, 1.45634848e-03, 2.12095089e-03, 3.08884360e-03,
           4.49843267e-03, 6.55128557e-03, 9.54095476e-03, 1.38949549e-02,
           2.02358965e-02, 2.94705170e-02, 4.29193426e-02, 6.25055193e-02,
           9.10298178e-02, 1.32571137e-01, 1.93069773e-01, 2.81176870e-01,
           4.09491506e-01, 5.96362332e-01, 8.68511374e-01, 1.26485...
           3.72759372e+01, 5.42867544e+01, 7.90604321e+01, 1.15139540e+02,
           1.67683294e+02, 2.44205309e+02, 3.55648031e+02, 5.17947468e+02,
           7.54312006e+02, 1.09854114e+03, 1.59985872e+03, 2.32995181e+03,
           3.39322177e+03, 4.94171336e+03, 7.19685673e+03, 1.04811313e+04,
           1.52641797e+04, 2.22299648e+04, 3.23745754e+04, 4.71486636e+04,
           6.86648845e+04, 1.00000000e+05])},
                 scoring=&#x27;neg_root_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" ><label for="sk-estimator-id-1" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;GridSearchCV<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html">?<span>Documentation for GridSearchCV</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>GridSearchCV(estimator=Ridge(),
                 param_grid={&#x27;alpha&#x27;: array([1.00000000e-03, 1.45634848e-03, 2.12095089e-03, 3.08884360e-03,
           4.49843267e-03, 6.55128557e-03, 9.54095476e-03, 1.38949549e-02,
           2.02358965e-02, 2.94705170e-02, 4.29193426e-02, 6.25055193e-02,
           9.10298178e-02, 1.32571137e-01, 1.93069773e-01, 2.81176870e-01,
           4.09491506e-01, 5.96362332e-01, 8.68511374e-01, 1.26485...
           3.72759372e+01, 5.42867544e+01, 7.90604321e+01, 1.15139540e+02,
           1.67683294e+02, 2.44205309e+02, 3.55648031e+02, 5.17947468e+02,
           7.54312006e+02, 1.09854114e+03, 1.59985872e+03, 2.32995181e+03,
           3.39322177e+03, 4.94171336e+03, 7.19685673e+03, 1.04811313e+04,
           1.52641797e+04, 2.22299648e+04, 3.23745754e+04, 4.71486636e+04,
           6.86648845e+04, 1.00000000e+05])},
                 scoring=&#x27;neg_root_mean_squared_error&#x27;)</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" ><label for="sk-estimator-id-2" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">best_estimator_: Ridge</label><div class="sk-toggleable__content fitted"><pre>Ridge(alpha=np.float64(0.029470517025518096))</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" ><label for="sk-estimator-id-3" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;Ridge<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.Ridge.html">?<span>Documentation for Ridge</span></a></label><div class="sk-toggleable__content fitted"><pre>Ridge(alpha=np.float64(0.029470517025518096))</pre></div> </div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 109-111

Now, we store the hyperparameter's metrics in a dataframe and make a custom
plot:

.. GENERATED FROM PYTHON SOURCE LINES 113-119

.. code-block:: Python

    import pandas as pd

    df = pd.DataFrame(gs_cv.cv_results_)
    df.insert(len(df.columns), "rmse", -df["mean_test_score"].values)
    df[["param_alpha", "rmse"]].head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>param_alpha</th>
          <th>rmse</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.001000</td>
          <td>55.618873</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.001456</td>
          <td>55.492536</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.002121</td>
          <td>55.358884</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.003089</td>
          <td>55.219924</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.004498</td>
          <td>55.076585</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 120-130

.. code-block:: Python

    import matplotlib.pyplot as plt

    fig = plt.figure(layout="constrained", dpi=200)
    plt.plot(df["param_alpha"], df["rmse"])
    plt.xscale("log")
    plt.xlabel("Alpha hyperparameter")
    plt.ylabel("RMSE")
    plt.title("Ridge regression")
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_01_getting_started_001.png
   :alt: Ridge regression
   :srcset: /auto_examples/images/sphx_glr_plot_01_getting_started_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 131-134

|
Finally, we store some relevant information to our skore project, so that we
can visualize them later in the skore UI for example:

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: Python

    my_project.put("my_gs_cv", gs_cv)
    my_project.put("my_df", df)
    my_project.put("my_fig", fig)








.. GENERATED FROM PYTHON SOURCE LINES 141-146

.. seealso::

  For more information about the functionalities and the different types
  of items that we can store in a skore :class:`~skore.Project`,
  see :ref:`example_overview_skore_project`.

.. GENERATED FROM PYTHON SOURCE LINES 148-165

Manipulating the skore UI
^^^^^^^^^^^^^^^^^^^^^^^^^

The skore UI is a very efficient tool to track and visualize the items in your
project, such as grid search or cross-validation results.

#.  On the top left, by default, you can observe that you are in a *View* called
    ``default``. You can rename this view or create another one.

#.  From the *Items* section on the bottom left, you can add stored items to this
    view, either by clicking on ``+`` or by dragging an item to the right.

#.  In the skore UI on the right, you can drag-and-drop items to re-order them,
    remove items, etc.

.. image:: https://raw.githubusercontent.com/sylvaincom/sylvaincom.github.io/master/files/probabl/skore/2024_10_31_skore_demo_compressed.gif
  :alt: Getting started with ``skore`` demo

.. GENERATED FROM PYTHON SOURCE LINES 167-183

Tracking the history of items
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Skore does not overwrite items with the same name, instead it stores their history so
that, from the skore UI, we could visualize their different histories:

.. image:: https://raw.githubusercontent.com/sylvaincom/sylvaincom.github.io/master/files/probabl/skore/2024_11_21_tracking_comp.gif
  :alt: Tracking the history of an item from the skore UI

This functionality is very useful to never lose some key machine learning metrics,
for example.

.. seealso::

  For more information about the tracking of items using their history,
  see :ref:`example_historization_items`.

.. GENERATED FROM PYTHON SOURCE LINES 185-190

Machine learning diagnostics: enhancing scikit-learn functions
==============================================================

Skore wraps some key scikit-learn functions to automatically provide
diagnostics and checks when using them, as a way to facilitate good practices.

.. GENERATED FROM PYTHON SOURCE LINES 192-203

Cross-validation with skore
^^^^^^^^^^^^^^^^^^^^^^^^^^^

In order to assist its users when programming, skore has implemented a
:func:`skore.cross_validate` function that wraps scikit-learn's
:func:`sklearn.model_selection.cross_validate`.

On the same previous data and a Ridge regressor (with default ``alpha`` value),
let us launch skore's cross-validation, which will automatically add
(:func:`~skore.Project.put`)
a ``cross_validation`` item with a plotly chart in our project.

.. GENERATED FROM PYTHON SOURCE LINES 205-212

.. code-block:: Python

    from skore import cross_validate

    cv_results = cross_validate(Ridge(), X, y, cv=5, project=my_project)

    fig_plotly = my_project.get_item("cross_validation").plot
    fig_plotly






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>                        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.35.2.min.js"></script>                <div id="4616d12c-6e60-484d-848d-ad328c6f2759" class="plotly-graph-div" style="height:100%; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("4616d12c-6e60-484d-848d-ad328c6f2759")) {                    Plotly.newPlot(                        "4616d12c-6e60-484d-848d-ad328c6f2759",                        [{"hovertemplate":"%{y}","legendgroup":"group0","marker":{"color":"#636EFA"},"name":"test_score","showlegend":true,"visible":true,"x":[0,1,2,3,4],"y":[0.23525249224772737,0.22565864126294644,0.08867683412341831,0.2258023886409567,0.20372585266416976],"type":"bar"},{"hovertemplate":"%{y}","legendgroup":"group0","line":{"color":"#636EFA","dash":"dash"},"mode":"lines","name":"Average test_score","showlegend":false,"visible":true,"x":[-0.5,4.5],"y":[0.19582324178784372,0.19582324178784372],"type":"scatter"},{"hovertemplate":"%{y}","legendgroup":"group0","line":{"color":"#636EFA","dash":"dot"},"mode":"lines","name":"Average + 1 std. dev. test_score","showlegend":false,"visible":true,"x":[-0.5,4.5],"y":[0.2568280982210851,0.2568280982210851],"type":"scatter"},{"hovertemplate":"%{y}","legendgroup":"group0","line":{"color":"#636EFA","dash":"dot"},"mode":"lines","name":"Average - 1 std. dev. test_score","showlegend":false,"visible":true,"x":[-0.5,4.5],"y":[0.13481838535460233,0.13481838535460233],"type":"scatter"},{"hovertemplate":"%{y}","legendgroup":"group1","marker":{"color":"#EF553B"},"name":"test_r2","showlegend":true,"visible":"legendonly","x":[0,1,2,3,4],"y":[0.23525249224772737,0.22565864126294644,0.08867683412341831,0.2258023886409567,0.20372585266416976],"type":"bar"},{"hovertemplate":"%{y}","legendgroup":"group1","line":{"color":"#EF553B","dash":"dash"},"mode":"lines","name":"Average test_r2","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[0.19582324178784372,0.19582324178784372],"type":"scatter"},{"hovertemplate":"%{y}","legendgroup":"group1","line":{"color":"#EF553B","dash":"dot"},"mode":"lines","name":"Average + 1 std. dev. test_r2","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[0.2568280982210851,0.2568280982210851],"type":"scatter"},{"hovertemplate":"%{y}","legendgroup":"group1","line":{"color":"#EF553B","dash":"dot"},"mode":"lines","name":"Average - 1 std. dev. test_r2","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[0.13481838535460233,0.13481838535460233],"type":"scatter"},{"hovertemplate":"%{y}","legendgroup":"group2","marker":{"color":"#00CC96"},"name":"test_neg_root_mean_squared_error","showlegend":true,"visible":"legendonly","x":[0,1,2,3,4],"y":[-55.311240427856305,-69.86317862753013,-60.196111021712234,-69.6209001549828,-70.35229530760138],"type":"bar"},{"hovertemplate":"%{y}","legendgroup":"group2","line":{"color":"#00CC96","dash":"dash"},"mode":"lines","name":"Average test_neg_root_mean_squared_error","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[-65.06874510793656,-65.06874510793656],"type":"scatter"},{"hovertemplate":"%{y}","legendgroup":"group2","line":{"color":"#00CC96","dash":"dot"},"mode":"lines","name":"Average + 1 std. dev. test_neg_root_mean_squared_error","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[-58.16628048327979,-58.16628048327979],"type":"scatter"},{"hovertemplate":"%{y}","legendgroup":"group2","line":{"color":"#00CC96","dash":"dot"},"mode":"lines","name":"Average - 1 std. dev. test_neg_root_mean_squared_error","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[-71.97120973259334,-71.97120973259334],"type":"scatter"},{"customdata":["0:00:00.000790","0:00:00.000632","0:00:00.000585","0:00:00.000612","0:00:00.000580"],"hovertemplate":"%{customdata}\u003cextra\u003efit_time (timedelta)\u003c\u002fextra\u003e","legendgroup":"group3","marker":{"color":"#AB63FA"},"name":"fit_time (seconds)","showlegend":true,"visible":"legendonly","x":[0,1,2,3,4],"y":[0.000789642333984375,0.0006318092346191406,0.0005850791931152344,0.0006115436553955078,0.000579833984375],"type":"bar"},{"customdata":["0:00:00.000790","0:00:00.000632","0:00:00.000585","0:00:00.000612","0:00:00.000580"],"hovertemplate":"%{customdata}\u003cextra\u003efit_time (timedelta)\u003c\u002fextra\u003e","legendgroup":"group3","line":{"color":"#AB63FA","dash":"dash"},"mode":"lines","name":"Average fit_time (seconds)","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[0.0006395816802978515,0.0006395816802978515],"type":"scatter"},{"customdata":["0:00:00.000790","0:00:00.000632","0:00:00.000585","0:00:00.000612","0:00:00.000580"],"hovertemplate":"%{customdata}\u003cextra\u003efit_time (timedelta)\u003c\u002fextra\u003e","legendgroup":"group3","line":{"color":"#AB63FA","dash":"dot"},"mode":"lines","name":"Average + 1 std. dev. fit_time (seconds)","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[0.0007260470632760419,0.0007260470632760419],"type":"scatter"},{"customdata":["0:00:00.000790","0:00:00.000632","0:00:00.000585","0:00:00.000612","0:00:00.000580"],"hovertemplate":"%{customdata}\u003cextra\u003efit_time (timedelta)\u003c\u002fextra\u003e","legendgroup":"group3","line":{"color":"#AB63FA","dash":"dot"},"mode":"lines","name":"Average - 1 std. dev. fit_time (seconds)","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[0.0005531162973196612,0.0005531162973196612],"type":"scatter"},{"customdata":["0:00:00.001360","0:00:00.001111","0:00:00.001094","0:00:00.001087","0:00:00.001073"],"hovertemplate":"%{customdata}\u003cextra\u003escore_time (timedelta)\u003c\u002fextra\u003e","legendgroup":"group4","marker":{"color":"#FFA15A"},"name":"score_time (seconds)","showlegend":true,"visible":"legendonly","x":[0,1,2,3,4],"y":[0.001359701156616211,0.0011112689971923828,0.0010941028594970703,0.0010869503021240234,0.0010728836059570312],"type":"bar"},{"customdata":["0:00:00.001360","0:00:00.001111","0:00:00.001094","0:00:00.001087","0:00:00.001073"],"hovertemplate":"%{customdata}\u003cextra\u003escore_time (timedelta)\u003c\u002fextra\u003e","legendgroup":"group4","line":{"color":"#FFA15A","dash":"dash"},"mode":"lines","name":"Average score_time (seconds)","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[0.0011449813842773437,0.0011449813842773437],"type":"scatter"},{"customdata":["0:00:00.001360","0:00:00.001111","0:00:00.001094","0:00:00.001087","0:00:00.001073"],"hovertemplate":"%{customdata}\u003cextra\u003escore_time (timedelta)\u003c\u002fextra\u003e","legendgroup":"group4","line":{"color":"#FFA15A","dash":"dot"},"mode":"lines","name":"Average + 1 std. dev. score_time (seconds)","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[0.0012658071121818843,0.0012658071121818843],"type":"scatter"},{"customdata":["0:00:00.001360","0:00:00.001111","0:00:00.001094","0:00:00.001087","0:00:00.001073"],"hovertemplate":"%{customdata}\u003cextra\u003escore_time (timedelta)\u003c\u002fextra\u003e","legendgroup":"group4","line":{"color":"#FFA15A","dash":"dot"},"mode":"lines","name":"Average - 1 std. dev. score_time (seconds)","showlegend":false,"visible":"legendonly","x":[-0.5,4.5],"y":[0.001024155656372803,0.001024155656372803],"type":"scatter"}],                        {"template":{"data":{"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"#E5ECF6","showlakes":true,"showland":true,"subunitcolor":"white"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2}}},"title":{"text":"Cross-validation results for each split"},"xaxis":{"dtick":1,"tickmode":"linear","title":{"text":"Split number"}},"yaxis":{"title":{"text":"Value"}}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 213-214

Hence, we can observe some key metrics and get insights on our cross-validation.

.. GENERATED FROM PYTHON SOURCE LINES 216-220

.. seealso::

  For more information about the motivation and usage of :func:`skore.cross_validate`,
  see :ref:`example_cross_validate`.

.. GENERATED FROM PYTHON SOURCE LINES 222-230

Train-test split with skore
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Skore has implemented a :func:`skore.train_test_split` function that wraps
scikit-learn's :func:`sklearn.model_selection.train_test_split`.

For example, it can raise warnings when there is class imbalance in the data to
provide methodological advice:

.. GENERATED FROM PYTHON SOURCE LINES 232-239

.. code-block:: Python

    X = np.arange(400).reshape((200, 2))
    y = [0] * 150 + [1] * 50

    X_train, X_test, y_train, y_test = skore.train_test_split(
        X=X, y=y, test_size=0.2, random_state=0
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/skore/sklearn/train_test_split/train_test_split.py:165: HighClassImbalanceTooFewExamplesWarning:

    It seems that you have a classification problem with at least one class with fewer than 100 examples in the test set. In this case, using train_test_split may not be a good idea because of high variability in the scores obtained on the test set. We suggest three options to tackle this challenge: you can increase test_size, collect more data, or use skore's cross_validate function.

    /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/skore/sklearn/train_test_split/train_test_split.py:165: HighClassImbalanceWarning:

    It seems that you have a classification problem with a high class imbalance. In this case, using train_test_split may not be a good idea because of high variability in the scores obtained on the test set. To tackle this challenge we suggest to use skore's cross_validate function.

    /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/skore/sklearn/train_test_split/train_test_split.py:165: ShuffleTrueWarning:

    We detected that the `shuffle` parameter is set to `True` either explicitly or from its default value. In case of time-ordered events (even if they are independent), this will result in inflated model performance evaluation because natural drift will not be taken into account. We recommend setting the shuffle parameter to `False` in order to ensure the evaluation process is really representative of your production release process.





.. GENERATED FROM PYTHON SOURCE LINES 240-244

.. seealso::

  For more information about the motivation and usage of
  :func:`skore.train_test_split`, see :ref:`example_train_test_split`.

.. GENERATED FROM PYTHON SOURCE LINES 246-249

.. admonition:: Stay tuned for some new features!

   Feel free to join our `Discord <https://discord.gg/scBZerAGwW>`_!

.. GENERATED FROM PYTHON SOURCE LINES 251-255

Cleanup the project
-------------------

Removing the temporary directory:

.. GENERATED FROM PYTHON SOURCE LINES 257-258

.. code-block:: Python

    temp_dir.cleanup()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.614 seconds)


.. _sphx_glr_download_auto_examples_plot_01_getting_started.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_01_getting_started.ipynb <plot_01_getting_started.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_01_getting_started.py <plot_01_getting_started.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_01_getting_started.zip <plot_01_getting_started.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
