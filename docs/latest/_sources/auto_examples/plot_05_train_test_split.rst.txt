
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_05_train_test_split.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_05_train_test_split.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_05_train_test_split.py:


.. _example_train_test_split:

==========================
Enhancing train-test split
==========================

This example illustrates the motivation and the use of skore's
:func:`skore.train_test_split` to get assistance when developing your
ML/DS projects.

.. GENERATED FROM PYTHON SOURCE LINES 14-20

Creating and loading the skore project
======================================

We start by creating a temporary directory to store our project such that we can
easily clean it after executing this example. If you want to keep the project, you
have to skip this section.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: Python

    import tempfile
    from pathlib import Path

    import skore

    temp_dir = tempfile.TemporaryDirectory(prefix="skore_example_")
    temp_dir_path = Path(temp_dir.name)

    my_project = skore.create("my_project.skore", working_dir=temp_dir_path)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                        <Logger skore.project.project (INFO)> Project  create.py:148
                                                              file                  
                                                              '/tmp/sk              
                                                              ore_exam              
                                                              ple_qszl              
                                                              4hxn/my_              
                                                              project.              
                                                              skore'                
                                                              was                   
                                                              successf              
                                                              ully                  
                                                              created.              




.. GENERATED FROM PYTHON SOURCE LINES 33-54

Train-test split in scikit-learn
================================

Scikit-learn has a function for splitting the data into train and test
sets: :func:`sklearn.model_selection.train_test_split`.
Its signature is the following:

.. code-block:: python

    sklearn.model_selection.train_test_split(
        *arrays,
        test_size=None,
        train_size=None,
        random_state=None,
        shuffle=True,
        stratify=None
    )

where ``*arrays`` is a Python *args (it allows you to pass a varying number of
positional arguments) and the scikit-learn doc indicates that it is ``a sequence of
indexables with same length / shape[0]``.

.. GENERATED FROM PYTHON SOURCE LINES 56-57

Let us construct a design matrix ``X`` and target ``y`` to illustrate our point:

.. GENERATED FROM PYTHON SOURCE LINES 59-64

.. code-block:: Python

    import numpy as np

    X, y = np.arange(10).reshape((5, 2)), range(5)
    print(X, "\n", y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0 1]
     [2 3]
     [4 5]
     [6 7]
     [8 9]] 
     range(0, 5)




.. GENERATED FROM PYTHON SOURCE LINES 65-66

In scikit-learn, the most common usage is the following:

.. GENERATED FROM PYTHON SOURCE LINES 68-75

.. code-block:: Python

    from sklearn.model_selection import train_test_split as sklearn_train_test_split

    X_train, X_test, y_train, y_test = sklearn_train_test_split(
        X, y, test_size=0.2, random_state=0
    )
    print(X_train, "\n", y_train, "\n", X_test, "\n", y_test)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0 1]
     [2 3]
     [6 7]
     [8 9]] 
     [0, 1, 3, 4] 
     [[4 5]] 
     [2]




.. GENERATED FROM PYTHON SOURCE LINES 76-77

Notice the shuffling that is done by default.

.. GENERATED FROM PYTHON SOURCE LINES 79-94

In scikit-learn, the user cannot explicitly set the design matrix ``X`` and
the target ``y``. The following:

.. code-block:: python

  X_train, X_test, y_train, y_test = sklearn_train_test_split(
      X=X, y=y, test_size=0.2, random_state=0)

would return:

.. code-block:: python

  TypeError: got an unexpected keyword argument 'X'

In general, in Python, keyword arguments are useful to prevent typos. For example, in the following, ``X`` and ``y`` are reversed:

.. GENERATED FROM PYTHON SOURCE LINES 96-100

.. code-block:: Python

    X_train, X_test, y_train, y_test = sklearn_train_test_split(
        y, X, test_size=0.2, random_state=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 101-103

but Python will not catch this mistake for us.
This is where skore comes in handy.

.. GENERATED FROM PYTHON SOURCE LINES 105-107

Train-test split in skore
=========================

.. GENERATED FROM PYTHON SOURCE LINES 109-111

skore has its own :func:`skore.train_test_split` that wraps scikit-learn's
:func:`sklearn.model_selection.train_test_split`.

.. GENERATED FROM PYTHON SOURCE LINES 113-115

Expliciting the positional arguments for ``X`` and ``y``
--------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 117-119

First of all, naturally, it can be used as a simple drop-in replacement for
scikit-learn:

.. GENERATED FROM PYTHON SOURCE LINES 121-126

.. code-block:: Python

    X_train, X_test, y_train, y_test = skore.train_test_split(
        X, y, test_size=0.2, random_state=0
    )
    print(X_train, "\n", y_train, "\n", X_test, "\n", y_test)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/skore/sklearn/train_test_split/train_test_split.py:161: HighClassImbalanceTooFewExamplesWarning:

    It seems that you have a classification problem with at least one class with fewer than 100 examples in the test set. In this case, using train_test_split may not be a good idea because of high variability in the scores obtained on the test set. We suggest three options to tackle this challenge: you can increase test_size, collect more data, or use skore's cross_validate function.

    [[0 1]
     [2 3]
     [6 7]
     [8 9]] 
     [0, 1, 3, 4] 
     [[4 5]] 
     [2]




.. GENERATED FROM PYTHON SOURCE LINES 127-132

.. note::

  The outputs of :func:`skore.train_test_split` are intentionally exactly the same as
  :func:`sklearn.model_selection.train_test_split`, so the user can just use the
  skore version as a drop-in replacement of scikit-learn.

.. GENERATED FROM PYTHON SOURCE LINES 134-136

Contrary to scikit-learn, skore allows users to explicit the ``X`` and ``y``, making
detection of eventual issues easier:

.. GENERATED FROM PYTHON SOURCE LINES 138-143

.. code-block:: Python

    X_train, X_test, y_train, y_test = skore.train_test_split(
        X=X, y=y, test_size=0.2, random_state=0
    )
    print(X_train, "\n", y_train, "\n", X_test, "\n", y_test)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/skore/sklearn/train_test_split/train_test_split.py:161: HighClassImbalanceTooFewExamplesWarning:

    It seems that you have a classification problem with at least one class with fewer than 100 examples in the test set. In this case, using train_test_split may not be a good idea because of high variability in the scores obtained on the test set. We suggest three options to tackle this challenge: you can increase test_size, collect more data, or use skore's cross_validate function.

    [[0 1]
     [2 3]
     [6 7]
     [8 9]] 
     [0, 1, 3, 4] 
     [[4 5]] 
     [2]




.. GENERATED FROM PYTHON SOURCE LINES 144-146

Moreover, when passing ``X`` and ``y`` explicitly, the ``X``'s are always returned
before the ``y``'s, even when they are inverted:

.. GENERATED FROM PYTHON SOURCE LINES 148-154

.. code-block:: Python

    arr = np.arange(10).reshape((5, 2))
    arr_train, arr_test, X_train, X_test, y_train, y_test = skore.train_test_split(
        arr, y=y, X=X, test_size=0.2, random_state=0
    )
    print(X_train, "\n", y_train, "\n", X_test, "\n", y_test)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/skore/sklearn/train_test_split/train_test_split.py:161: HighClassImbalanceTooFewExamplesWarning:

    It seems that you have a classification problem with at least one class with fewer than 100 examples in the test set. In this case, using train_test_split may not be a good idea because of high variability in the scores obtained on the test set. We suggest three options to tackle this challenge: you can increase test_size, collect more data, or use skore's cross_validate function.

    [[0 1]
     [2 3]
     [6 7]
     [8 9]] 
     [0, 1, 3, 4] 
     [[4 5]] 
     [2]




.. GENERATED FROM PYTHON SOURCE LINES 155-166

Automatic diagnostics: raising methodological warnings
------------------------------------------------------

In machine learning, class-imbalance (the classes in a dataset are not equally
represented) requires a specific modelling.
For example, in a dataset with 95% majority class (class ``1``) and 5% minority class
(class ``0``), a dummy model that always predicts class ``1`` will have a 95%
accuracy, while it would be useless for identifying examples of class ``0``.
Hence, it is important to detect when we have class-imbalance.

Suppose that we have imbalanced data :

.. GENERATED FROM PYTHON SOURCE LINES 168-171

.. code-block:: Python

    X = [[1]] * 4
    y = [0, 1, 1, 1]








.. GENERATED FROM PYTHON SOURCE LINES 172-174

In that case, :func:`skore.train_test_split` raises a warning telling the user that
there is class imbalance:

.. GENERATED FROM PYTHON SOURCE LINES 176-180

.. code-block:: Python

    X_train, X_test, y_train, y_test = skore.train_test_split(
        X=X, y=y, test_size=0.2, random_state=0
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/skore/sklearn/train_test_split/train_test_split.py:161: HighClassImbalanceTooFewExamplesWarning:

    It seems that you have a classification problem with at least one class with fewer than 100 examples in the test set. In this case, using train_test_split may not be a good idea because of high variability in the scores obtained on the test set. We suggest three options to tackle this challenge: you can increase test_size, collect more data, or use skore's cross_validate function.

    /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/skore/sklearn/train_test_split/train_test_split.py:161: HighClassImbalanceWarning:

    It seems that you have a classification problem with a high class imbalance. In this case, using train_test_split may not be a good idea because of high variability in the scores obtained on the test set. To tackle this challenge we suggest to use skore's cross_validate function.





.. GENERATED FROM PYTHON SOURCE LINES 181-184

Hence, skore recommends the users to take into account this class-imbalance, that
they might have missed, in their modelling strategy.
skore provides methodological checks.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.029 seconds)


.. _sphx_glr_download_auto_examples_plot_05_train_test_split.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_05_train_test_split.ipynb <plot_05_train_test_split.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_05_train_test_split.py <plot_05_train_test_split.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_05_train_test_split.zip <plot_05_train_test_split.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
