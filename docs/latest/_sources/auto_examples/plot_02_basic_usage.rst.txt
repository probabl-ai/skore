
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_02_basic_usage.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_02_basic_usage.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_02_basic_usage.py:


===========================
2) Basic usage of ``skore``
===========================

This example complements the `Getting started with skore` example.

.. GENERATED FROM PYTHON SOURCE LINES 10-12

``skore`` UI
------------

.. GENERATED FROM PYTHON SOURCE LINES 14-30

.. code-block:: Python

    import altair as alt
    import io
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    import plotly.express as px
    import PIL

    from sklearn.datasets import load_diabetes
    from sklearn.linear_model import Lasso
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler

    from skore import load
    from skore.item import MediaItem








.. GENERATED FROM PYTHON SOURCE LINES 31-33

Initialize a Project and launch the UI
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 35-44

.. code-block:: Python

    import subprocess

    # remove the project if it already exists
    subprocess.run("rm -rf my_project_bu.skore".split())

    # create the project
    subprocess.run("python3 -m skore create my_project_bu".split())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    CompletedProcess(args=['python3', '-m', 'skore', 'create', 'my_project_bu'], returncode=0)



.. GENERATED FROM PYTHON SOURCE LINES 45-50

.. code-block:: Python

    from skore import load

    my_project_gs = load("my_project_gs.skore")









.. GENERATED FROM PYTHON SOURCE LINES 51-55

Storing an integer
^^^^^^^^^^^^^^^^^^

Now, let us store our first object, for example an integer:

.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: Python

    my_project_gs.put("my_int", 3)








.. GENERATED FROM PYTHON SOURCE LINES 60-63

Here, the name of my object is ``my_int`` and the integer value is 3.

You can read it from the project:

.. GENERATED FROM PYTHON SOURCE LINES 65-67

.. code-block:: Python

    my_project_gs.get("my_int")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    3



.. GENERATED FROM PYTHON SOURCE LINES 68-69

Careful; like in a traditional Python dictionary, the `put` method will *overwrite* past data if you use a key which already exists!

.. GENERATED FROM PYTHON SOURCE LINES 71-73

.. code-block:: Python

    my_project_gs.put("my_int", 30_000)








.. GENERATED FROM PYTHON SOURCE LINES 74-75

Let us check the updated value:

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python

    my_project_gs.get("my_int")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    30000



.. GENERATED FROM PYTHON SOURCE LINES 80-81

By using the `delete_item` method, you can also delete an object so that your `skore` UI does not become cluttered:

.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: Python

    my_project_gs.put("my_int_2", 10)








.. GENERATED FROM PYTHON SOURCE LINES 86-88

.. code-block:: Python

    my_project_gs.delete_item("my_int_2")








.. GENERATED FROM PYTHON SOURCE LINES 89-90

You can use `my_project_gs.list_item_keys` to display all the keys in your project:

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python

    my_project_gs.list_item_keys()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['my_df', 'my_figure', 'my_fitted_pipeline', 'my_int']



.. GENERATED FROM PYTHON SOURCE LINES 95-96

### Storing a string

.. GENERATED FROM PYTHON SOURCE LINES 98-99

We just stored a integer, now let us store some text using strings!

.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: Python

    my_project_gs.put("my_string", "Hello world!")








.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: Python

    my_project_gs.get("my_string")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'Hello world!'



.. GENERATED FROM PYTHON SOURCE LINES 107-108

``my_project_gs.get`` infers the type of the inserted object by default. For example, strings are assumed to be in Markdown format. Hence, you can customize the display of your text:

.. GENERATED FROM PYTHON SOURCE LINES 110-123

.. code-block:: Python

    my_project_gs.put(
        "my_string_2",
        (
            """Hello world!, **bold**, *italic*, `code`

    ```python
    def my_func(x):
        return x+2
    ```
    """
        ),
    )








.. GENERATED FROM PYTHON SOURCE LINES 124-125

Moreover, you can also explicitly tell `skore` the media type of an object, for example in HTML:

.. GENERATED FROM PYTHON SOURCE LINES 127-128

Note: we use ``put_item`` instead of ``put``:

.. GENERATED FROM PYTHON SOURCE LINES 128-135

.. code-block:: Python

    my_project_gs.put_item(
        "my_string_3",
        MediaItem.factory(
            "<p><h1>Title</h1> <b>bold</b>, <i>italic</i>, etc.</p>", media_type="text/html"
        ),
    )








.. GENERATED FROM PYTHON SOURCE LINES 136-137

Note that the media type is only used for the UI, and not in this notebook at hand:

.. GENERATED FROM PYTHON SOURCE LINES 139-141

.. code-block:: Python

    my_project_gs.get("my_string_3")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'<p><h1>Title</h1> <b>bold</b>, <i>italic</i>, etc.</p>'



.. GENERATED FROM PYTHON SOURCE LINES 142-143

You can also conveniently use Python f-strings:

.. GENERATED FROM PYTHON SOURCE LINES 145-151

.. code-block:: Python

    x = 2
    y = [1, 2, 3, 4]
    my_project_gs.put(
        "my_string_4", f"The value of `x` is {x} and the value of `y` is {y}."
    )








.. GENERATED FROM PYTHON SOURCE LINES 152-154

Storing many kinds of data
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 156-157

Python list:

.. GENERATED FROM PYTHON SOURCE LINES 159-162

.. code-block:: Python

    my_list = [1, 2, 3, 4]
    my_project_gs.put("my_list", my_list)








.. GENERATED FROM PYTHON SOURCE LINES 163-164

Python dictionary:

.. GENERATED FROM PYTHON SOURCE LINES 166-172

.. code-block:: Python

    my_dict = {
        "company": "probabl",
        "year": 2023,
    }
    my_project_gs.put("my_dict", my_dict)








.. GENERATED FROM PYTHON SOURCE LINES 173-174

``numpy`` array:

.. GENERATED FROM PYTHON SOURCE LINES 176-179

.. code-block:: Python

    my_arr = np.random.randn(3, 3)
    my_project_gs.put("my_arr", my_arr)








.. GENERATED FROM PYTHON SOURCE LINES 180-181

``pandas`` data frame:

.. GENERATED FROM PYTHON SOURCE LINES 183-186

.. code-block:: Python

    my_df = pd.DataFrame(np.random.randn(3, 3))
    my_project_gs.put("my_df", my_df)








.. GENERATED FROM PYTHON SOURCE LINES 187-191

Data visualization
^^^^^^^^^^^^^^^^^^

Note that, in the dashboard, the interactivity of plots is supported, for example for ``altair`` and ``plotly``.

.. GENERATED FROM PYTHON SOURCE LINES 193-194

``matplotlib`` figures:

.. GENERATED FROM PYTHON SOURCE LINES 196-210

.. code-block:: Python

    x = np.linspace(0, 2, 100)

    fig, ax = plt.subplots(figsize=(5, 2.7), layout="constrained")
    ax.plot(x, x, label="linear")
    ax.plot(x, x**2, label="quadratic")
    ax.plot(x, x**3, label="cubic")
    ax.set_xlabel("x label")
    ax.set_ylabel("y label")
    ax.set_title("Simple Plot")
    ax.legend()
    plt.show()

    my_project_gs.put("my_figure", fig)




.. image-sg:: /auto_examples/images/sphx_glr_plot_02_basic_usage_001.png
   :alt: Simple Plot
   :srcset: /auto_examples/images/sphx_glr_plot_02_basic_usage_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 211-212

``altair`` charts:

.. GENERATED FROM PYTHON SOURCE LINES 214-230

.. code-block:: Python

    num_points = 100
    df_plot = pd.DataFrame(
        {"x": np.random.randn(num_points), "y": np.random.randn(num_points)}
    )

    my_altair_chart = (
        alt.Chart(df_plot)
        .mark_circle()
        .encode(x="x", y="y", tooltip=["x", "y"])
        .interactive()
        .properties(title="My title")
    )
    my_altair_chart.show()

    my_project_gs.put("my_altair_chart", my_altair_chart)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    alt.Chart(...)




.. GENERATED FROM PYTHON SOURCE LINES 231-242

Plotly figures:

NOTE: Some users reported the following error when running the Plotly cells:
```
ValueError: Mime type rendering requires nbformat>=4.2.0 but it is not installed
```
This is a Plotly issue which is documented `here <https://github.com/plotly/plotly.py/issues/3285>`_; to solve it, we recommend installing nbformat in your environment, e.g. with

.. code:: console

   pip install --upgrade nbformat

.. GENERATED FROM PYTHON SOURCE LINES 244-251

.. code-block:: Python

    df = px.data.iris()
    fig = px.scatter(
        df, x=df.sepal_length, y=df.sepal_width, color=df.species, size=df.petal_length
    )
    fig.show()
    my_project_gs.put("my_plotly_fig", fig)








.. GENERATED FROM PYTHON SOURCE LINES 252-253

Animated ``plotly`` figures:

.. GENERATED FROM PYTHON SOURCE LINES 255-273

.. code-block:: Python

    df = px.data.gapminder()
    my_anim_plotly_fig = px.scatter(
        df,
        x="gdpPercap",
        y="lifeExp",
        animation_frame="year",
        animation_group="country",
        size="pop",
        color="continent",
        hover_name="country",
        log_x=True,
        size_max=55,
        range_x=[100, 100000],
        range_y=[25, 90],
    )
    my_anim_plotly_fig.show()
    my_project_gs.put("my_anim_plotly_fig", my_anim_plotly_fig)








.. GENERATED FROM PYTHON SOURCE LINES 274-275

PIL images:

.. GENERATED FROM PYTHON SOURCE LINES 277-283

.. code-block:: Python

    my_pil_image = PIL.Image.new("RGB", (100, 100), color="red")
    with io.BytesIO() as output:
        my_pil_image.save(output, format="png")

    my_project_gs.put("my_pil_image", my_pil_image)








.. GENERATED FROM PYTHON SOURCE LINES 284-290

Scikit-learn models and pipelines
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As ``skore`` is developed by `Probabl <https://probabl.ai>`_, the spin-off of scikit-learn, ``skore`` treats scikit-learn models and pipelines as first-class citizens.

First of all, you can store a scikit-learn model:

.. GENERATED FROM PYTHON SOURCE LINES 292-295

.. code-block:: Python

    my_model = Lasso(alpha=2)
    my_project_gs.put("my_model", my_model)








.. GENERATED FROM PYTHON SOURCE LINES 296-297

You can also store ``scikit-learn`` pipelines:

.. GENERATED FROM PYTHON SOURCE LINES 299-304

.. code-block:: Python

    my_pipeline = Pipeline(
        [("standard_scaler", StandardScaler()), ("lasso", Lasso(alpha=2))]
    )
    my_project_gs.put("my_pipeline", my_pipeline)








.. GENERATED FROM PYTHON SOURCE LINES 305-306

Moreover, you can store fitted ``scikit-learn`` pipelines:

.. GENERATED FROM PYTHON SOURCE LINES 308-315

.. code-block:: Python

    diabetes = load_diabetes()
    X = diabetes.data[:150]
    y = diabetes.target[:150]
    my_pipeline.fit(X, y)

    my_project_gs.put("my_fitted_pipeline", my_pipeline)








.. GENERATED FROM PYTHON SOURCE LINES 316-317

*Stay tuned for some new features!*

.. GENERATED FROM PYTHON SOURCE LINES 319-323

Manipulating the skore UI
^^^^^^^^^^^^^^^^^^^^^^^^^

The following is just some ``skore`` strings that we generate in order to provide more context on the obtained report.

.. GENERATED FROM PYTHON SOURCE LINES 325-330

.. code-block:: Python

    my_project_gs.put(
        "my_comment_1",
        "<p><h1>Welcome to skore!</h1><p><code>skore</code> allows data scientists to create tracking and visualizations from their Python code. This HTML document is actually a skore report generated using the <code>01_basic_usage.ipynb</code> example notebook then exported (into HTML)!<p>",
    )








.. GENERATED FROM PYTHON SOURCE LINES 331-336

.. code-block:: Python

    my_project_gs.put(
        "my_comment_2",
        "<p><h2>Integers</h1></p>",
    )








.. GENERATED FROM PYTHON SOURCE LINES 337-339

.. code-block:: Python

    my_project_gs.put("my_comment_3", "<p><h2>Strings</h1></p>")








.. GENERATED FROM PYTHON SOURCE LINES 340-345

.. code-block:: Python

    my_project_gs.put(
        "my_comment_4",
        "<p><h2>Many kinds of data</h1></p>",
    )








.. GENERATED FROM PYTHON SOURCE LINES 346-351

.. code-block:: Python

    my_project_gs.put(
        "my_comment_5",
        "<p><h2>Plots</h1></p>",
    )








.. GENERATED FROM PYTHON SOURCE LINES 352-353

.. code-block:: Python

    my_project_gs.put("my_comment_6", "<p><h2>Scikit-learn models and pipelines</h1></p>")








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.824 seconds)


.. _sphx_glr_download_auto_examples_plot_02_basic_usage.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_02_basic_usage.ipynb <plot_02_basic_usage.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_02_basic_usage.py <plot_02_basic_usage.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_02_basic_usage.zip <plot_02_basic_usage.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
